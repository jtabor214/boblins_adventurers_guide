{"version":3,"file":"main.js","mappings":"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","sources":["webpack://boblins-adventurers-guide/./node_modules/marked/lib/marked.esm.js","webpack://boblins-adventurers-guide/./src/scripts/baseRenderer.js","webpack://boblins-adventurers-guide/./src/index.js","webpack://boblins-adventurers-guide/./src/scripts/raceRenderer.js","webpack://boblins-adventurers-guide/./src/scripts/classRenderer.js","webpack://boblins-adventurers-guide/./src/scripts/backgroundRenderer.js","webpack://boblins-adventurers-guide/./src/scripts/featRenderer.js","webpack://boblins-adventurers-guide/./src/scripts/weaponsRenderer.js"],"sourcesContent":["/**\n * marked v11.1.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nconst _comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}$+<=>`^|~';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","import { marked } from \"marked\";\n\nclass BaseRenderer {\n  constructor(data, config) {\n    this.data = data;\n\n    this.config = {\n      containerClass: '',\n      imagePrefix: '',\n      imageType: '',\n      displayFields: [],\n      gridColumns: 1,\n      ...config\n    };\n\n    this.populateDOM(data)\n  }\n\n  populateDOM(data) {\n    const container = document.getElementById('visualContainer');\n    const list = document.createElement('ul');\n    list.classList.add(this.config.containerClass)\n\n    data.results.forEach(item => {\n      const itemContainer = document.createElement('div');\n      const button = document.createElement('button');\n      button.classList.add('title');\n      button.textContent = item.name;\n\n      if (this.config.imagePrefix) {\n        const image = document.createElement('img');\n        image.classList.add (`${this.config.imageType}-image`);\n        const imageName = item.name.replace(/-/g, '').toLowerCase();\n        image.src = `./assets/${this.config.imagePrefix}/${imageName}.png`;\n        itemContainer.appendChild(image);\n      }\n\n      itemContainer.appendChild(button);\n      button.addEventListener('click', () => this.renderDescription(item));\n      list.appendChild(itemContainer);\n    });\n\n    container.innerHTML = '';\n    container.appendChild(list);\n  }\n\n  renderDescription(item) {\n    const container = document.getElementById('dataContainer');\n    const list = document.createElement('ul');\n\n    const info = this.config.displayFields.map(field => item[field]).filter(Boolean);\n\n    info.forEach(content => {\n      const element = document.createElement('p');\n      element.innerHTML = marked.parse(content.toString());\n      list.appendChild(element);\n    });\n\n    container.innerHTML = '';\n    container.appendChild(list);\n  }\n}\n\nexport default BaseRenderer;","import RaceRenderer from \"./scripts/raceRenderer\";\nimport ClassRenderer from \"./scripts/classRenderer\";\nimport BackgroundRenderer from \"./scripts/backgroundRenderer\";\nimport FeatRenderer from \"./scripts/featRenderer\";\nimport WeaponRenderer from \"./scripts/weaponsRenderer\";\n\nconst TAB_CONFIG = {\n'race-tab': {\n  endpoint: 'https://api.open5e.com/races/?document__slug__not_in=toh',\n  renderer: RaceRenderer\n},\n 'class-tab': {\n  endpoint: 'https://api.open5e.com/classes/',\n  renderer: ClassRenderer\n},\n'backgrounds-tab': {\n  endpoint: 'https://api.open5e.com/backgrounds/?document__slug__in=a5e',\n  renderer: BackgroundRenderer\n},\n'feats-tab': {\n  endpoint: 'https://api.open5e.com/v1/feats/',\n  renderer: FeatRenderer\n},\n'weapons-tab': {\n  endpoint: 'https://api.open5e.com/v1/weapons/?document__slug__not_in=toh',\n  renderer: WeaponRenderer \n// 'magic-items-tab': {\n//   endpoint: 'https://api.open5e.com/v1/magicitems/?document__slug__in=wotc-srd&ordering=rarity',\n//   renderer: MagicItemRenderer\n// }\n}};\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const backgroundMusic = document.getElementById(\"music\");\n  backgroundMusic.volume = 0.2;\n\n  setAudioControls();\n  setModal();\n  setTabHandlers();\n});\n\n// audio player controls\nfunction setAudioControls() {\n  const audioEle = document.getElementById('music');\n  const audioButton = document.getElementById('audio-button');\n  const speakerIcon = document.getElementById('speaker-icon');\n\n  audioButton.addEventListener('click', () => {\n    if (audioEle.paused) {\n      audioEle.play();\n      speakerIcon.classList.remove('fa-play');\n      speakerIcon.classList.add('fa-pause');\n    } else {\n      audioEle.pause();\n      speakerIcon.classList.remove('fa-pause');\n      speakerIcon.classList.add('fa-play');\n    }\n  });\n}\n\n// modal controls\nfunction setModal() {\n  const openModal = document.getElementById('modal-tab');\n  const closeModal = document.getElementById('close-modal-button');\n  const modalEle = document.getElementById(\"message\");\n\n  openModal.addEventListener('click', () => {\n    window.location.reload();\n  });\n\n  closeModal.addEventListener('click', () => {\n    modalEle.style.display = 'none';\n  });\n}\n\n// tab handlers\nfunction setTabHandlers() {\n  Object.entries(TAB_CONFIG).forEach(([tabId, config]) => {\n    const tabElement = document.getElementById(tabId);\n    if (!tabElement) return;\n\n    tabElement.addEventListener('click', async () => {\n      try {\n        const response = await fetch(config.endpoint);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        new config.renderer(data);\n      } catch (error) {\n        console.error(`Error loading data for ${tabId}:`, error);\n      }\n    });\n  });\n}\n\n// const renderArmorInfo = async () => {\n//   const response = await fetch (\"https://api.open5e.com/v1/armor/\");\n//   if (response.ok) {\n//     const data = await response.json();\n//     console.log(data);\n//     new ArmorRender(data);\n//   }\n// };\n\n// const renderItemInfo = async () => {\n//   const response = await fetch (\"https://api.open5e.com/v1/magicitems/?document__slug__in=wotc-srd&ordering=rarity\");\n//   if (response.ok) {\n//     const data = await response.json();\n//     console.log(data);\n//     new MagicItemRender(data);\n//   }\n// };\n\n","import BaseRenderer from \"./baseRenderer\";\n\nclass RaceRenderer extends BaseRenderer {\n  constructor(data) {\n    super(data, {\n      containerClass:'raceNames',\n      imagePrefix:'characters',\n      imageType:'race',\n      displayFields: ['desc', 'traits', 'vision'],\n      gridColumns: 1\n    });\n  }\n\n}\n\nexport default RaceRenderer;","import BaseRenderer from \"./baseRenderer\";\n\nclass ClassRenderer extends BaseRenderer {\n\tconstructor(data) {\n\t\tsuper(data, {\n\t\t\tcontainerClass: 'classTitles',\n\t\t\timagePrefix: 'class_icons',\n\t\t\timageType: 'class',\n\t\t\tdisplayFields: [\n\t\t\t\t'desc',\n\t\t\t\t'prof_armor',\n\t\t\t\t'prof_weapons',\n\t\t\t\t'prof_tools',\n\t\t\t\t'prof-saving-throws',\n\t\t\t\t'prof_skills',\n\t\t\t\t'equipment'\n\t\t\t],\n\t\t\tgridColumns: 2\n\t\t});\n\t}\n}\n\nexport default ClassRenderer;","import BaseRenderer from \"./baseRenderer\";\n\nclass BackgroundRenderer extends BaseRenderer {\n  constructor(data) {\n    super(data, {\n      containerClass: 'backgroundTitles',\n      imagePrefix: 'background_icons',\n      imageType: 'background',\n      displayFields: [\n        'desc',\n        'skill_proficiencies',\n        'equipment',\n        'suggested_characteristics'\n      ],\n      gridColumns: 3\n    });\n  }\n}\n\nexport default BackgroundRenderer","import BaseRenderer from \"./baseRenderer\";\n\nclass FeatRenderer extends BaseRenderer {\n  constructor(data) {\n    super(data, {\n      containerClass: 'featTitles',\n      displayFields: [\n        'name',\n        'desc',\n        'prerequisite',\n        'effects_desc'\n      ],\n      gridColumns: 2\n    });\n  }\n}\n\nexport default FeatRenderer;","import BaseRenderer from \"./baseRenderer\";\n\nclass WeaponsRenderer extends BaseRenderer {\n  constructor(data) {\n    super(data, {\n      containerClass: 'weaponNames',\n      displayFields: [\n        'name',\n        'category',\n        'cost',\n        'damage_dice',\n        'damage_type',\n        'weight',\n        'properties'\n      ],\n      gridColumns: 3\n    });\n  }\n}\n\nexport default WeaponsRenderer"],"names":["_defaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","unescapeTest","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","rules","constructor","this","space","src","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","row","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","emStrongLDelim","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","bullet","_paragraph","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","_punctuation","_inlineComment","_inlineLabel","inlineNormal","blockSkip","reflinkSearch","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parseInline","renderers","genericToken","ret","parser","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","markedInstance","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","marked","getDefaults","data","config","containerClass","imagePrefix","imageType","displayFields","gridColumns","populateDOM","container","document","getElementById","createElement","classList","add","results","itemContainer","button","textContent","imageName","appendChild","addEventListener","renderDescription","innerHTML","field","Boolean","element","TAB_CONFIG","endpoint","BaseRenderer","super","volume","audioEle","audioButton","speakerIcon","paused","play","remove","pause","setAudioControls","openModal","closeModal","modalEle","window","location","reload","style","display","setModal","entries","_ref","tabId","tabElement","response","fetch","ok","status","json"],"sourceRoot":""}